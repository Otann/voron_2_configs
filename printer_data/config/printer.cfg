## Voron Design VORON2 350mm 

[include mainsail.cfg]               ; Defines pause/resume/cancel routines, used in UI and KlipperScreen (@see _CLIENT_VARIABLE)
[include KAMP_Settings.cfg]          ; See https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging
[include thermistors.cfg]            ; extra configutation for specific thermistos used

# Configuration parts

[include motors.cfg]                 ; XY and Z motors configuration
[include features/sensorless.cfg]    ; Overrides homing routines, used for sensorless homing
[include features/lights.cfg]        ; Defines leds and status commands (defines macros like _LED_STATUS_XXX)

# Quality of life

[include features/heatsoak.cfg]      ; cancellable soaking routine
[include features/speed.cfg]         ; big macro for testing speed irl
# [include features/config_backup.cfg] ; backup to github.com/otann/voron_2_configs

# Toolheads 

; Must contain:
; - [extruder]
; - [probe]
; - [fan]
; - [heater_fan hotend_fan]
; Should contain:
; - [resonance_tester]
; - [temperature_fan canbus_mcu]
; - [temperature_sensor canbus_pcb]

[include heads/toolchanger.cfg]                 ; Required by klipper-toolchanger plugin
# [include heads/sc_stealthburner_uhf_v3.cfg]   ; StealthChanger - StealthChanger UHF v3 (default tool)
# [include heads/sc_dragonburner_yellow.cfg]    ; StealthChanger - DragonBurner yellow

#####################################################################
#   Devices configuration
#####################################################################

[virtual_sdcard]
path: /home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT


[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_240019000550565843333620-if00
restart_method: command


[printer]
kinematics: corexy
max_velocity: 400  
max_accel: 7000             # Max 6000 according to input shaper, but feeling lucky ¯\_(ツ)_/¯
max_z_velocity: 50          # Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0


[input_shaper]
shaper_type_x: zv
shaper_freq_x: 47
shaper_type_y: zv    
shaper_freq_y: 40


#####################################################################
#   Klipper settings
#####################################################################

[idle_timeout]
timeout: 1800
gcode:
    _LED_STATUS_IDLE
    M117 Going idle
    M84
    TURN_OFF_HEATERS
    SET_FAN_SPEED FAN=nevermore SPEED=0
    SET_FAN_SPEED FAN=exhaust SPEED=0


[exclude_object]


[gcode_arcs]
resolution: 0.1


[respond]
# what should be called for M118 command
# default_type: echo
default_prefix: tgnotify


[force_move]
enable_force_move: True

  
[gcode_macro M117]
rename_existing: M117.1
gcode:
    M117.1 {rawparams}                  ; sets status as original command
    {action_respond_info(rawparams)}    ; prints same message to console


#####################################################################
#   Bed Configuration
#####################################################################

[heater_bed]
heater_pin: PA3
sensor_type: ATC Semitec 104GT-2
sensor_pin: PF3
max_power: 0.6 ; percentage, docs say rule of thumb is 0.4 watts / cm^2
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769


[quad_gantry_level]
gantry_corners:
    -60,-40
    410,390
points:
    50,50
    50,280
    300,280
    300,50
speed: 300
retries: 10
max_adjust: 10
retry_tolerance: 0.0075
horizontal_move_z: 10


[bed_mesh]
mesh_min: 25, 25
mesh_max: 325,305
speed: 300
horizontal_move_z: 10
fade_start: 0.6
fade_end: 10.0
probe_count: 7,7 ; Values should be odd, so one point is directly at bed center
algorithm: bicubic


#####################################################################
#   Sensors and fans
#####################################################################

[temperature_fan pi_temp]
pin: PD15
sensor_type: temperature_host
min_temp: 0.0
max_temp: 85.0
target_temp: 60.0
control: watermark
max_speed: 0.6
min_speed: 0.2


[fan_generic exhaust]
## Back panel exhaust - FAN4 on Octopus
pin: PD13


[fan_generic nevermore]
## The Filter - HE0 on Octopus, PA2
pin: PA2


[temperature_fan mcu_temp]
pin: PD12
sensor_type: temperature_mcu
min_temp: 0
max_temp: 85
target_temp: 60.0
control: watermark
max_speed: 0.6
min_speed: 0.2


[temperature_sensor chamber]
## Thermistor from Ender 3v2 hotend
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PF4
min_temp: 0
max_temp: 100


#####################################################################
#   Macros
#####################################################################

[gcode_macro _HOMED]
description: Ensures that head is homes
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}


[gcode_macro FRONT]
description: Moves to the front, quite high
gcode:
    _HOMED
    {% set th = printer.toolhead %}
    G90
    G0 X{th.axis_minimum.x + 50} Y{th.axis_minimum.y + 80} F15000
    G0 Z150 F1000


[gcode_macro FORCE_GANTRY_UP]
description: Forcibly move gantry up and then release motors
gcode:
  SET_KINEMATIC_POSITION Z=0
  G0 Z10 F500
  M84 # disable motors afterwards


[gcode_macro _BUCKET_XY]
description: Moves nozzle above the purge bucket
gcode:
    _HOMED
    # G0 X25 Y-15 F15000 ; for DragonBurner
    G0 X25 Y-18 F17000

[gcode_macro _BUCKET]
description: Moves nozzle above the purge bucket
gcode:
    _HOMED
    _BUCKET_XY
    G0 Z5 F500


[gcode_macro _SCRUB_NOZZLE]
variable_start_x: 45
# variable_start_y: -7  ; for DragonBurner
variable_start_y: -10  ; for StealthBurner
variable_start_z: 2
variable_wipe_dist: 50
variable_wipe_qty: 3
variable_wipe_spd: 200
variable_raise_distance: 30
gcode:
    _HOMED                                          ; ensure homing    
    G90                                             ; absolute positioning
    ## Move nozzle to start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F500

    ## Wipe nozzle
    {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 X{start_x + wipe_dist} F{wipe_spd * 60}
        G1 X{start_x} F{wipe_spd * 60}
    {% endfor %}

    ## Raise nozzle
    G1 Z{raise_distance} F500


[gcode_macro _CLEAN_NOZZLE]
gcode:
  M117 Cleaning the nozzle
  _HOMED
  _BUCKET
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=235
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM=235
  G92 E0                ; zero the extruder
  G1 E25.0 F500         ; extract filament
  G1 E-5.0 F2000        ; retract a bit
  _SCRUB_NOZZLE
  G1 E-5.0 F2000        ; retract a bit
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=185
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=185
  _SCRUB_NOZZLE
  M117 Cooldown to probing temps
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=150
  M117 Nozzle is clean


[gcode_macro PRINT_START]
gcode:
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_heatsoak = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_heatsoak = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set z_heatsoak = 70 %}
  
  # If there is a heatsoak going, cancel it so it won't cause anything unexpected later
  DISABLE_HEAT_SOAK
  
  # Even though there is a heatsoak routine, save some time and start heating the bed early
  M117 Preparing for the print, preheating bed to {target_bed}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target_bed}
  
  # Base homing to navigate around
  M117 Pre-homing all axes
  G28                             ; Full home (XYZ)
  G90                             ; Absolut position
  _LED_STATUS_PREPARING
  _CLEAN_NOZZLE                   ; Clean nozzle before QGL and Bed Mesh
  
  ; Precise homing for printing
  BED_MESH_CLEAR
  M117 Re-homing all axes
  G90
  G28
  _LED_STATUS_PREPARING
  M117 Quad Gantry Level
  QUAD_GANTRY_LEVEL
  G28 Z
  M117 Bed Mesh Calibration
  BED_MESH_CALIBRATE
  G28 Z
  
  M117 Waiting for printing temperatures (bed: {target_bed}c, Extruder: {target_extruder}c)
  
  # Set final temperatures
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target_bed}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_extruder}
  # Wait for temperatures
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target_bed}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_extruder}

  G92 E0                ; zero the extruder
  G1 E10.0 F500         ; that was pulled dufing _CLEAN_NOZZLE
  G90                   ; switch to absolute coordinates before purging and printing 

  _LED_STATUS_PRINTING
  M117 Starting the print
  M118 Starting the print

  # VORON_PURGE
  LINE_PURGE


[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %}
    # get bed temp to determine cooldown routine
    {% set bed_temp = printer.heater_bed.temperature %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                                        ; wait for buffer to clear
    G92 E0                                      ; zero the extruder
    G1 E-5.0 F1800                              ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                         ; absolute positioning
    G0 X{x_safe} Y{y_safe} F20000               ; move nozzle to remove stringing
    G0 Z{z_safe} F500
    # _BUCKET_XY                                ; park nozzle at the bucket
    G0 X20 Y120 F10000                            ; part nozzlt at the front

    M107                                        ; turn off fan
    M84                                         ; disengage motors early to disable electronics fan
    {% if bed_temp > 90 %}
        _LED_STATUS_COOLDOWN
        SET_FAN_SPEED FAN=nevermore SPEED=0     ; stop air filtering
        SET_FAN_SPEED FAN=exhaust SPEED=1       ; start sucking out hot air with back fan
        SET_IDLE_TIMEOUT TIMEOUT=1800           ; and wait for an hour until idle routine shuts it off
    {% endif %}

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M117 Print completed                        ; Set status
    M118 Print completed                        ; Notify on telegram


[gcode_macro COOLDOWN]
description: "The opposite of heatsoak routine"
gcode:
    TURN_OFF_HEATERS
    SET_FAN_SPEED FAN=nevermore SPEED=0
    SET_FAN_SPEED FAN=exhaust SPEED=0
    SET_IDLE_TIMEOUT TIMEOUT=1800


[gcode_macro UNLOAD_FILAMENT]
description: Heats up, purges, retracts and then moves to the front right position to unload
gcode:
    {% set speed = params.SPEED|default(300) %}
    # printer.max_velocity * ((4 * nozzle_diameter^2) / filament_area)
    # Example: 300 * (.64 / 2.405) = 80mm/s (mine is 400 at the moment)
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity|default(1000) %}
    SAVE_GCODE_STATE NAME=unload_state
    _HOMED    
    FRONT                                                  ; Present to the user for filament change
    
    # No filament sensor for now for StealthChanger
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0    ; Disable the sensor, as it kicks in occasionally    
    
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=250      ; Heat up extruder to roughtly match-all temperature
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=250           ; Wait for the temperature before retraction
    G91
    G92 E0    
    G1 E15 F{speed}                                        ; extrude filament to get better blob on end
    G1 E-100 F{max_velocity}                               ; retract additional filament to move out of melt zone
    G1 E-100 F{max_velocity}                               ; retract additional filament to move out of melt zone
    G1 E-100 F{max_velocity}                               ; retract additional filament to move out of melt zone
    M400                                                   ; Wait for it to complete, before notifying the user
    M118 Ready for unloading filament                      ; Call the user to manually replace the spool
    
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
description: Use this after you inserted the fresh filament into the extruder
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    _HOMED
    
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=250      ; Heat up extruder to roughtly match-all temperature
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=250           ; Wait for the temperature before loading
    G91
    G92 E0
    G1 E50 F{max_velocity}                                 ; Load to the hotend aproximately
    G1 E80 F{speed}                                        ; Purge
    G1 E80 F{speed}                                        ; Purge more
    G1 E-5.0 F{speed}                                      ; Retract a bit for easier pluck
    M400                                                   ; Wait for it to complete
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150      ; Cool down to pluck the drooled filament
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=150           ; Wait before notifying the user
    M118 Filament loaded

    # No filament sensor for now for StealthChanger
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    RESTORE_GCODE_STATE NAME=load_state


[gcode_macro M600]
variable_park_x: 175
variable_park_y: 10
variable_z_lift: 50
variable_velocity: 60
variable_retract: 0.5
gcode:
    SAVE_GCODE_STATE NAME=STATE_M600 # remembers the position

    # # safe park coords
    {% set th = printer.toolhead %}
    {% set park_x = [params.X|default(park_x)|int, th.axis_maximum.x - 50]|min %}
    {% set park_y = [params.Y|default(park_y)|int, th.axis_minimum.y + 20]|min %}
    {% set park_z = [th.position.z + params.Z_LIFT|default(z_lift)|int, 150]|min %}

    # fluidd.cfg overrides PAUSE to accept extra commands
    # it is also possible to define _CLIENT_VARIABLE macro and set variables there
    PAUSE X={park_x} Y={park_y} Z_MIN={park_z}
    
    # Tell user to reload filament
    M117 Reload filament
    M118 Reload filament
    
    RESTORE_GCODE_STATE NAME=STATE_M600 # restore the position


[gcode_macro _bot_data]
variable_lapse_video_size: 0
variable_lapse_filename: 'None'
variable_lapse_path: 'None'
gcode:
    M117 Setting bot lapse variables

    
[gcode_macro _CLIENT_VARIABLE]
; configures variables needed in fluidd.cfg
variable_use_custom_pos   : False # use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 175   # custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 300   # custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 30    # custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   # the value to retract while PAUSE
variable_cancel_retract   : 5.0   # the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  # retract speed in mm/s
variable_unretract        : 1.0   # the value to unretract while RESUME
variable_speed_unretract  : 35.0  # unretract speed in mm/s
variable_speed_hop        : 15.0  # z move speed in mm/s
variable_speed_move       : 100.0 # move speed in mm/s
variable_park_at_cancel   : True  # allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 175   # different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 70    # different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False]
gcode:
  M117 This does nothing but store variables

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 44.233
#*# pid_ki = 2.359
#*# pid_kd = 207.344
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.043750, 0.032500, -0.010000, -0.002500, -0.040000
#*# 	-0.060000, 0.028750, -0.041250, 0.026250, -0.050000
#*# 	-0.050000, 0.025000, 0.018750, 0.021250, -0.047500
#*# 	-0.015000, 0.020000, -0.010000, -0.007500, -0.055000
#*# 	-0.015000, 0.063750, 0.023750, 0.026250, -0.010000
#*# 	-0.007500, 0.053750, 0.030000, 0.032500, -0.012500
#*# x_count = 5
#*# y_count = 6
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 92.66
#*# max_x = 266.06
#*# min_y = 75.61
#*# max_y = 284.56
