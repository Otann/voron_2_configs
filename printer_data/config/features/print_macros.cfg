[gcode_macro FRONT]
variable_pos_z: 70
description: Moves to the front, quite high
gcode:
  _HOMED
  G90
  {% set pos_x = printer["gcode_macro _BUCKET"].pos_x %}
  {% set pos_y = printer["gcode_macro _BUCKET"].pos_y %}
  {% set speed = printer["gcode_macro _BUCKET"].speed %}
  ROUNDED_G0 X={pos_x} D=40 F={speed}
  ROUNDED_G0 Y={pos_y} D=40
  ROUNDED_G0 Z={pos_z} D=0

[gcode_macro _BUCKET]
variable_pos_x: 25   ; for T0 (DB) ; 25 for T0 (SB)
variable_pos_y: -17  ; for T0 (DB) ; -18 for T0 (SB)
variable_pos_z: 5    ; for T0 (DB) 5 5 for T0 (SB)
variable_speed: 7000
description: Moves nozzle above the purge bucket
gcode:
  _HOMED
  G90
  ROUNDED_G0 X={pos_x} D=40 F={speed}
  ROUNDED_G0 Y={pos_y} D=40
  ROUNDED_G0 Z={pos_z} D=0

[gcode_macro _BUCKET_XY]
description: Moves nozzle above the purge bucket
gcode:
  _HOMED
  G90
  {% set pos_x = printer["gcode_macro _BUCKET"].pos_x %}
  {% set pos_y = printer["gcode_macro _BUCKET"].pos_y %}
  {% set speed = printer["gcode_macro _BUCKET"].speed %}
  ROUNDED_G0 X={pos_x} D=40 F={speed}
  ROUNDED_G0 Y={pos_y} D=0


[gcode_macro _SCRUB_NOZZLE]
variable_start_x: 45
variable_start_y: -5  ; -10 for SB as T0
variable_start_z: 1.5  ; 2 for SB as T0
variable_wipe_delta_y: 2
variable_wipe_dist: 50
variable_wipe_qty: 3
variable_wipe_spd: 200
variable_raise_distance: 20
gcode:  
  M117 Scrubbing the nozzle
  _HOMED                                          ; ensure homing    
  G90                                             ; absolute positioning
  ## Move nozzle to start position
  G1 X{start_x} Y{start_y} F6000
  G1 Z{start_z} F500

  ## Wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %}
      G1 X{start_x + wipe_dist} F{wipe_spd * 60}
      G1 Y{start_y - wipe_delta_y} F{wipe_spd * 60}        
      G1 X{start_x} F{wipe_spd * 60}
      G1 Y{start_y} F{wipe_spd * 60}        
  {% endfor %}

  ## Raise nozzle
  G1 Z{raise_distance} F500
  M117 Nozzle scrubbed


[gcode_macro _CLEAN_NOZZLE]
variable_temp_hot: 240
variable_temp_cool: 175
variable_retract_hot: 3.0
variable_retract_cool: 2.0
variable_purge_distance: 50.0
gcode:
  {% set hot = params.HOT|default(temp_hot)|int %}
  {% set cool = params.COOL|default(hot * 0.75)|int %}
  _HOMED
  _BUCKET

  # Do it for the current tool
  {% set tool_name = printer.toolchanger.tool %}
  {% set tool = printer[tool_name] %}
  {% set heater = tool['extruder'] %}               ; Retrieves the name of the extruder of the current tool
  M117 Cleaning the nozzle for the active tool ({tool_name})
  
  SET_HEATER_TEMPERATURE HEATER={heater} TARGET={hot}
  TEMPERATURE_WAIT SENSOR={heater} MINIMUM={hot}
  
  G92 E0                                            ; zero the extruder
  G1 E{purge_distance} F500                         ; extract filament
  G1 E-{retract_hot} F2000                          ; retract while hot

  _SCRUB_NOZZLE
  G1 E-{retract_cool} F2000                         ; retract while cool
  
  SET_HEATER_TEMPERATURE HEATER={heater} TARGET={cool}
  TEMPERATURE_WAIT SENSOR={heater} MAXIMUM={cool}
  
  _SCRUB_NOZZLE
  
  M117 Nozzle is clean  


[gcode_macro PRINT_START]
gcode:
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  # {% set x_heatsoak = printer.toolhead.axis_maximum.x|float / 2 %}
  # {% set y_heatsoak = printer.toolhead.axis_maximum.y|float / 2 %}
  # {% set z_heatsoak = 70 %}

  {% set tool_n = params.TOOL|default("0") %}
  {% set t0_temp = params.T0_TEMP|default(0)|int %}
  {% set t1_temp = params.T1_TEMP|default(0)|int %}
  {% set t2_temp = params.T2_TEMP|default(0)|int %}
  
  # If there is a heatsoak going, cancel it so it won't cause anything unexpected later
  DISABLE_HEAT_SOAK
  
  # Even though there is a heatsoak routine, save some time and start heating the bed early
  M117 Preparing for the print, preheating bed to {target_bed}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target_bed}
  
  # Base homing to navigate around
  M117 Pre-homing to init toolchanger and calibrate the frame
  G28                                               ; Full home (XYZ)
  SELECT_TOOL T=0                                   ; Use default tool for bed measurements

  # Calibrating frame with default tool
  M117 Calibrating frame with T0
  G90                                               ; Absolut position
  _LED_STATUS_PREPARING
  _CLEAN_NOZZLE HOT={target_extruder}               ; Clean nozzle before QGL and Bed Mesh

  M117 Waiting for cooldown
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=130 ; Cool down for QGL (apparently doesn't use probe init code)
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=130
  M117 Scrubbing after cooldown
  _SCRUB_NOZZLE
  
  QUAD_GANTRY_LEVEL                                 ; Calibrage gantry with clean nozzle
  G28                                               ; Home again with clean nozzle for better z precision
  G90  
  _LED_STATUS_PREPARING                             ; Set status again after re-homing
  M117 Bed Mesh Calibration
  BED_MESH_CLEAR                                    ; Discard old bed mesh and clean nozzle
  BED_MESH_CALIBRATE                                ; This is done after cleaning nozzle and gantry calibration

  # Release main too and select the target tool for preheating
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  SELECT_TOOL T={tool_n}

  # Set temperature for the requested tool
  {% set tool = printer['tool T' + tool_n] %}
  {% set heater = tool['extruder'] %}
  M117 Setting target temperature for main tool - T{tool_n}
  SET_HEATER_TEMPERATURE HEATER={heater} TARGET={t0_temp}

  # Set other tools too, if requested
  {% if t0_temp != 0 %}
    M117 Preheating T0 to t0_temp
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={t0_temp}
  {% endif %}
  {% if t1_temp != 0 %}
    M117 Preheating T1 to t1_temp
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={t1_temp}
  {% endif %}
  {% if t2_temp != 0 %}
    M117 Preheating T2 to t2_temp
    SET_HEATER_TEMPERATURE HEATER=extruder2 TARGET={t2_temp}
  {% endif %}

  # Wait for main tool
  _BUCKET
  M117 Waiting for printing temperatures (bed: {target_bed}c, extruder: {target_extruder}c)
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target_bed}
  TEMPERATURE_WAIT SENSOR={heater} MINIMUM={target_extruder}

  {% set clean_macro = printer['gcode_macro _CLEAN_NOZZLE'] %}
  {% set clean_retract = clean_macro.retract_hot + clean_macro.retract_cool %}  
  G92 E0                            ; zero the extruder  
  G1 E{clean_retract} F400          ; that was pulled dufing _CLEAN_NOZZLE
  G1 E25 F400                       ; (!!!) temp hack for PLA
  G90                               ; switch to absolute coordinates before printing 
  _SCRUB_NOZZLE

  _LED_STATUS_PRINTING
  M117 Starting the print
  M118 Starting the print

  # Disabling custom purge, since tool might be different?
  # VORON_PURGE
  LINE_PURGE


[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %}
    # get bed temp to determine cooldown routine
    {% set bed_temp = printer.heater_bed.temperature %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                                        ; wait for buffer to clear
    G92 E0                                      ; zero the extruder
    G1 E-5.0 F1800                              ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                         ; absolute positioning
    G0 X{x_safe} Y{y_safe} F20000               ; move nozzle to remove stringing
    G0 Z{z_safe} F500
    G0 X30 Y100 F10000                          ; part nozzlt at the front

    M107                                        ; turn off fan
    M84                                         ; disengage motors early to disable electronics fan
    {% if bed_temp > 90 %}
        _LED_STATUS_COOLDOWN
        SET_FAN_SPEED FAN=nevermore SPEED=0     ; stop air filtering
        SET_FAN_SPEED FAN=exhaust SPEED=1       ; start sucking out hot air with back fan
        SET_IDLE_TIMEOUT TIMEOUT=1800           ; and wait for an hour until idle routine shuts it off
    {% endif %}

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M117 Print completed                        ; Set status
    M118 Print completed                        ; Notify on telegram
    _LED_STATUS_ACTIVE


[gcode_macro COOLDOWN]
description: "The opposite of heatsoak routine"
gcode:
    TURN_OFF_HEATERS
    SET_FAN_SPEED FAN=nevermore SPEED=0
    SET_FAN_SPEED FAN=exhaust SPEED=0
    SET_IDLE_TIMEOUT TIMEOUT=1800


[gcode_macro UNLOAD_FILAMENT]
description: Ensures that active head is homed, then moves it to the front, heats up and retracts filament
gcode:
  {% set temp = params.TEMP|default(240) %}
  {% set slow = params.SPEED|default(420) %}
  
  {% if not printer.toolchanger.tool %}
    M117 No tool is selected, need to initialise first by homing
    _HOMED
  {% endif %}
  _UNLOAD_FILAMENT_IMPL TEMP={temp} SPEED={slow}

[gcode_macro _UNLOAD_FILAMENT_IMPL]
description: Internal routine for unloading the filament
gcode:
  {% set temp = params.TEMP %}
  {% set slow = params.SPEED %}
  {% set tool_name = printer.toolchanger.tool %}
  
  {% if not tool_name %}
    M117 Can't unload without knowing the tool
  {% else %}
    SAVE_GCODE_STATE NAME=unload_state
  
    {% set tool = printer[tool_name] %}
    {% set heater = tool['extruder'] %}                    ; Retrieves the name of the extruder of the current tool
    M117 Unloading {tool_name} with extruder {heater}
    
    _HOMED
    FRONT
  
    SET_HEATER_TEMPERATURE HEATER={heater} TARGET={temp}   ; Heat up extruder to roughtly match-all temperature
    TEMPERATURE_WAIT SENSOR={heater} MINIMUM={temp}        ; Wait for the temperature before retraction
    G91
    G92 E0    
    G1 E25 F{slow}                                         ; extrude filament to get better blob on end
    G1 E-100 F{slow}                                       ; retract additional filament to move out of melt zone
    G1 E-100 F{slow}                                       ; retract additional filament to move out of melt zone
    M400                                                   ; Wait for it to complete, before notifying the user
    M118 Ready for unloading filament                      ; Call the user to manually replace the spool
  
    RESTORE_GCODE_STATE NAME=unload_state
  {% endif %}
  

[gcode_macro LOAD_FILAMENT]
description: Checks for active tool and the extudes the filament and cools down for pucking the tip
gcode:
  {% set temp = params.HEATER|default(extruder) %}
  {% set temp = params.TEMP|default(235) %}
  {% set slow = params.SPEED|default(450) %}
  # printer.max_velocity * ((4 * nozzle_diameter^2) / filament_area)
  # Example: 300 * (.64 / 2.405) = 80mm/s (mine is 400 at the moment)
  {% set fast = 500 %}
  {% set tool_name = printer.toolchanger.tool %}
  
  {% if not tool_name %}
    M117 Can't load filament when tool is inactive
  {% else %}
    SAVE_GCODE_STATE NAME=load_state

    {% set tool = printer[tool_name] %}
    {% set heater = tool['extruder'] %}                    ; Retrieves the name of the extruder of the current tool
      
    SET_HEATER_TEMPERATURE HEATER={heater} TARGET={temp}   ; Heat up extruder to roughtly match-all temperature
    TEMPERATURE_WAIT SENSOR={heater} MINIMUM={temp}        ; Wait for the temperature before loading
    G91
    G92 E0
    G1 E20 F{fast}                                         ; Grab filament for some feedback
    G1 E100 F{slow}                                        ; Purge
    G1 E100 F{slow}                                        ; Purge more
    G1 E-3.0 F{slow}                                       ; Retract a bit for easier pluck
    
    M400                                                   ; Wait for it to complete
    SET_HEATER_TEMPERATURE HEATER={heater} TARGET=185      ; Cool down to pluck the drooled filament
    TEMPERATURE_WAIT SENSOR={heater} MAXIMUM=185           ; Wait before notifying the user
    M118 Filament loaded
  
    RESTORE_GCODE_STATE NAME=load_state

  {% endif %}  

[gcode_macro M600]
description: Filament change
variable_park_x: 175
variable_park_y: 10
variable_z_lift: 50
variable_velocity: 60
variable_retract: 0.5
gcode:
    SAVE_GCODE_STATE NAME=STATE_M600 # remembers the position

    # # safe park coords
    {% set th = printer.toolhead %}
    {% set park_x = [params.X|default(park_x)|int, th.axis_maximum.x - 50]|min %}
    {% set park_y = [params.Y|default(park_y)|int, th.axis_minimum.y + 20]|min %}
    {% set park_z = [th.position.z + params.Z_LIFT|default(z_lift)|int, 150]|min %}

    # mainsail.cfg overrides PAUSE to accept extra commands
    # it is also possible to define _CLIENT_VARIABLE macro and set variables there
    PAUSE X={park_x} Y={park_y} Z_MIN={park_z}
    
    # Tell user to reload filament
    M117 Reload filament
    M118 Reload filament
    
    RESTORE_GCODE_STATE NAME=STATE_M600 # restore the position
