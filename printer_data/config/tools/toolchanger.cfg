[rounded_path]
resolution: 0.2 # the length of a circle approximation segments.
replace_g0: False # Use at your own risk

[duplicate_pin_override]
pins: t0_sb2040_v3:gpio18, t1_sht36:PA2, t2_sht36:gpio16


[toolchanger]
t_command_restore_axis: Z
params_safe_y: 160 # (25+125+10)
params_close_y: 25
params_fast_speed: 30000 # Go as fast as we can
params_path_speed: 900 # 20mm/s for the actual change

# Path positions relative to the park position
# use x,y,z; f= multiplier to path speed; verify= Verify tool detected at end of the move.
params_dropoff_path: [{'z':4.8, 'y':5}, {'z':4.8, 'y':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-12.3, 'y':0}, {'z':-12.3, 'y':3.5}, {'z':-12.3, 'y':16}]
params_pickup_path: [{'z':-12.3, 'y':16}, {'z':-12.3, 'y':3.5}, {'z':-12.3, 'y':0}, {'z':0, 'y':0, 'f':0.5}, {'z':4.8, 'y':0}, {'z':4.8, 'y':5}]

# Default shaper params
params_input_shaper_freq_x: 62.4
params_input_shaper_freq_y: 88.6
initialize_on: manual ; manual | manual | first-use
require_tool_present: True
verify_tool_pickup: True
uses_axis: xyz
on_axis_not_homed: abort

error_gcode:
  PAUSE

# Common gcode to run before any tool change
before_change_gcode:
  {% set tn = "T"+(tool.tool_number|string) %}
  {% if printer["gcode_macro " + tn ] %}
     SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
  {% endif %}

after_change_gcode:
  M117 Running after_change_gcode, tool is {tool.tool_number}

  # Set atcitve tool light
  {% for tn in [0,1,2] %}
    SET_LED LED=t{tn}_led RED=0 GREEN=0 BLUE=0.1 WHITE=0
  {% endfor %}
  SET_LED LED=t{tool.tool_number}_led RED=0 GREEN=1 BLUE=0 WHITE=0

  # This was part of the default config
  {% set tn_macro = "T"+(tool.tool_number|string) %}
  {% if printer["gcode_macro " + tn_macro ] %}
     SET_GCODE_VARIABLE MACRO={tn_macro} VARIABLE=color VALUE="'c44'"
  {% endif %}
  {% if tool.params_input_shaper_freq_x %}
    SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y}
  {% endif %}

dropoff_gcode:
  {% set x = tool.params_park_x|float %}
  {% set y = tool.params_park_y|float %}
  {% set z = tool.params_park_z|float %}
  {% set fast = tool.params_fast_speed|float %}
  {% set path = tool.params_dropoff_path %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set cur_z = printer.toolhead.position[2]|float %}
  RESPOND TYPE=echo MSG='Dropping off {tool.name}'
  G90
  ; Move 1 mm up to avoid crashing into things
  G0 Z{ [cur_z+1.0, max_z]|min } F{fast}
  #   ##############  Move up to the dock  ##############
  M117 Moving up to the dock (Y={tool.params_safe_y}, X={x}, Z={z + path[0]['z']|float} )
  ROUNDED_G0 Y={tool.params_safe_y} D=20 F={fast}
  ROUNDED_G0 X={x} D=150 F={fast}
  ROUNDED_G0 Z={z + path[0]['z']|float} D=20 F={fast}
  ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast}
  #  ############## Run the path ##############
  M117 Running the path
  {% for pos in path %}
    M117 Running the path segment {pos}
    {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
    G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
  {% endfor %}

pickup_gcode:
  {% set x = tool.params_park_x|float %}
  {% set y = tool.params_park_y|float %}
  {% set z = tool.params_park_z|float %}
  {% set fast = tool.params_fast_speed|float %}
  {% set path = tool.params_pickup_path %}
  RESPOND TYPE=echo MSG='Picking up {tool.name}'
  G90
  #   ##############  Fast to the last point  ##############
  ROUNDED_G0 Y={tool.params_close_y} F={fast} D=5
  ROUNDED_G0 X={x} Z={z + path[0]['z']|float} F={fast} D=5
  ROUNDED_G0 Y={y + path[0]['y']|float} F={fast} D=0
  # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.

  {% if tool.extruder %}
    M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
  {% endif %}
  # Run the path
  {% for pos in path %}
    {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
    G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
    {% if 'verify' in pos %}
      VERIFY_TOOL_DETECTED T={tool.tool_number}
    {% endif %}
  {% endfor %}
  # Restore the position with smooth rounded move.
  ROUNDED_G0 Y={tool.params_safe_y} F={fast} D=20
  {% if 'Z' in restore_position %}
    ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
  {% endif %}
  {% if 'X' in restore_position %}
    ROUNDED_G0 X={restore_position.X} F={fast} D=1000
  {% endif %}
  {% if 'Y' in restore_position %}
    ROUNDED_G0 Y={restore_position.Y} F={fast} D=0
  {% endif %}
  ROUNDED_G0 D=0

[gcode_macro _DEBUG_TOOLCHANGER]
gcode:
  {% set tool = printer[printer.toolchanger.tool] %}
  M117 Debugging
  M117 Status: {printer.toolchanger.status}
  M117 Selected: {printer.toolchanger.tool}
  M117 As tool: {tool}
  M117 Detected: {printer.toolchanger.detected_tool}
  M117 Tool names: {printer.toolchanger.tool_names}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  INITIALIZE_TOOLCHANGER
  VERIFY_TOOL_DETECTED
  RESUME_BASE

[gcode_macro TOOL_ALIGN_START]
gcode:
    INITIALIZE_TOOLCHANGER # Detect current tool
    _TOOL_ALIGN_START

[gcode_macro _TOOL_ALIGN_START]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SET_TOOL_PARAMETER PARAMETER='params_path_speed' VALUE=300
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
    G0 X{tool.params_park_x} Z{tool.params_park_z}
    G0 Y{tool.params_park_y|float + 100.0}

[gcode_macro TOOL_ALIGN_TEST]
gcode:
    {% set curpos = printer.gcode_move.gcode_position %}
    {% if curpos[1] > 0 %}
      # Check if Y is not too far, to very unrealistic tests.
      RESPOND TYPE=error MSG='Test aborted. Tool too far away from the dock.'
    {% else %}
      INITIALIZE_TOOLCHANGER # Detect current tool
      SET_GCODE_OFFSET X=0 Y=0 Z=0
      SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
      SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
      SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
      TEST_TOOL_DOCKING RESTORE_AXIS=XYZ
    {% endif %}

[gcode_macro TOOL_ALIGN_DONE]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SAVE_TOOL_PARAMETER PARAMETER='params_park_x'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_y'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_z'
    RESET_TOOL_PARAMETER PARAMETER='params_path_speed'
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}