[include tool_detection.cfg]

[homing_override]
axes: xyz
gcode:
  _LED_STATUS_HOMING
  _INITIALIZE_FROM_DETECTED_TOOL
  {% if printer.probe.last_query  %}
  
    RESPOND TYPE=echo MSG='Z Probe triggered, cannot home.'
  
  {% else %}
  
    SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
  
    LOCK_Z_MOTORS # Otherwise gantry sags at the back, because of the bearigns inside Z mounts

    {% if home_all or 'Y' in params %}
      M117 Homing Y
      _SENSORLESS_HOME_Y
    {% endif %}
  
    {% if home_all or 'X' in params %}
      M117 Homing X
      _SENSORLESS_HOME_X
    {% endif %}
    
    {% if home_all or 'Z' in params %}
      M117 Homing Z

      {% set random_x = (range(-50, 50) | random) / 10 %}
      {% set random_y = (range(-50, 50) | random) / 10 %}
      
      G90
      G0 X{175.0+random_x} Y{175.0+random_y} F12000
      G28 Z
      _ADJUST_Z_HOME_FOR_TOOL_OFFSET
      
    {% endif %}
    _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
    M400
  
  {% endif %}
  _LED_STATUS_ACTIVE

[gcode_macro _SENSORLESS_HOMING]
variable_home_current: 0.49
gcode:
  M117 This is a config macro for sensorless homing, this doens't do anything
  ; It was 0.7 for X and 1.4 for Y before new gantry and Leadshine motors and for LDO motors
  ; Then is 0.49 before toolchanger reconfiguration
  ; In the example it is 0.5, but I am keeping old value for now to not mess sensitivity
  ; https://github.com/viesturz/klipper-toolchanger/blob/main/examples/z%20probe/per%20tool%20probe/homing.cfg
  

[gcode_macro _SENSORLESS_HOME_X]
variable_home_current: 0.5
gcode:
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro _SENSORLESS_HOMING"].home_current}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro _SENSORLESS_HOMING"].home_current}

    ## Move away from rightmost border
    SET_KINEMATIC_POSITION X=15
    G91
    G1 X-15 F1200

    ## Wait for commands to flush any commands (including stallguard) and then home
    M400
    G28 X

    ## Move away
    G91
    G1 X-15 F1200
    
    G4 P2000  # Wait 2 seconds… (give StallGuard registers time to clear).  You may need to give this more time if it's not reliable.

    ##  Set the current back to what's in the printer.cfg file. 
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}


[gcode_macro _SENSORLESS_HOME_Y]
gcode:
  {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
  {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}

  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro _SENSORLESS_HOMING"].home_current}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro _SENSORLESS_HOMING"].home_current}

  ## Move away from rightmost border
  SET_KINEMATIC_POSITION Y=15
  G91
  G1 Y-15 F1200

  ## Wait for commands to flush any commands (including stallguard) and then home
  M400
  G28 Y

  # Move away so the x-axis is no longer touching the back of the gantry
  G91
  G1 Y-15 F1200

  G4 P2000  # Wait 2 seconds… (give StallGuard registers time to clear).  You may need to give this more time if it's not reliable.

  ##  Set the current back to what's in the printer.cfg file. 
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}


[gcode_macro _HOMED]
description: Ensures that head is homes
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}


[gcode_macro LOCK_Z_MOTORS]
description: Lock motors in place without homing
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=1


; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
  G90 ; absolute mode
  G0 Z10 F1000
  {% set tool = printer.toolchanger.tool %}
  {% if tool %}
     {% set tool_z_offset = printer[tool].gcode_z_offset %}
     {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
     SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
  {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
  ; Apply gcode offsets
  {% set tool = printer.toolchanger.tool %}
  {% if tool %}
    SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
  {% endif %}

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
  {% set max_temp = 150 %}
  {% set actual_temp = printer[params.HEATER].temperature %}
  {% set target_temp = printer[params.HEATER].target %}
  {% if target_temp > max_temp %}
      { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
      SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
  {% endif %}
  # Temperature target is already low enough, but nozzle may still be too hot.
  {% if actual_temp > max_temp  + 2 %}
      { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
      TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
  {% endif %}
